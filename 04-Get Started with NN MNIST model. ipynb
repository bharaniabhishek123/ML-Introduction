{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"MNIST.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOj24RLF2E22UKltmtqShpF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f_i_hBEJdQ8t","executionInfo":{"status":"ok","timestamp":1632541677171,"user_tz":240,"elapsed":19803,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}},"outputId":"aa93bd60-d3d8-4d99-ce1a-d3800c75ca0e"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"6QZHMsZxEVxJ"},"source":["In this tutorial, we will do implement following steps for a classification task : \n","\n","We will implement the following steps - \n","\n","1.   Download the MNIST dataset \n","2.   Load and Pre-process the dataset\n","3.   Define the model\n","4.   Define the loss function and optimizer\n","5.   Train the network on the training data\n","6.   Define the evaluation metric\n","7.   Report results on the train and test data (using the evaluation metric)\n"]},{"cell_type":"markdown","metadata":{"id":"rqKvf1RkE9qf"},"source":["# 1. Download the MNIST Dataset \n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GkJLEmASFFzs","executionInfo":{"status":"ok","timestamp":1632541924171,"user_tz":240,"elapsed":1370,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}},"outputId":"a0d513de-2449-4ce8-9764-f2d9fd6f5b94"},"source":["!wget http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n","!wget http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n","!wget http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n","!wget http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n","!gunzip t*.gz"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["--2021-09-25 03:52:02--  http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n","Resolving yann.lecun.com (yann.lecun.com)... 104.21.29.36, 172.67.171.76, 2606:4700:3034::6815:1d24, ...\n","Connecting to yann.lecun.com (yann.lecun.com)|104.21.29.36|:80... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 9912422 (9.5M) [application/x-gzip]\n","Saving to: ‘train-images-idx3-ubyte.gz’\n","\n","\r          train-ima   0%[                    ]       0  --.-KB/s               \rtrain-images-idx3-u 100%[===================>]   9.45M  --.-KB/s    in 0.1s    \n","\n","2021-09-25 03:52:03 (89.2 MB/s) - ‘train-images-idx3-ubyte.gz’ saved [9912422/9912422]\n","\n","--2021-09-25 03:52:03--  http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n","Resolving yann.lecun.com (yann.lecun.com)... 104.21.29.36, 172.67.171.76, 2606:4700:3034::6815:1d24, ...\n","Connecting to yann.lecun.com (yann.lecun.com)|104.21.29.36|:80... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 28881 (28K) [application/x-gzip]\n","Saving to: ‘train-labels-idx1-ubyte.gz’\n","\n","train-labels-idx1-u 100%[===================>]  28.20K  --.-KB/s    in 0.001s  \n","\n","2021-09-25 03:52:03 (38.3 MB/s) - ‘train-labels-idx1-ubyte.gz’ saved [28881/28881]\n","\n","--2021-09-25 03:52:03--  http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n","Resolving yann.lecun.com (yann.lecun.com)... 104.21.29.36, 172.67.171.76, 2606:4700:3034::6815:1d24, ...\n","Connecting to yann.lecun.com (yann.lecun.com)|104.21.29.36|:80... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 1648877 (1.6M) [application/x-gzip]\n","Saving to: ‘t10k-images-idx3-ubyte.gz’\n","\n","t10k-images-idx3-ub 100%[===================>]   1.57M  --.-KB/s    in 0.07s   \n","\n","2021-09-25 03:52:03 (24.0 MB/s) - ‘t10k-images-idx3-ubyte.gz’ saved [1648877/1648877]\n","\n","--2021-09-25 03:52:03--  http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n","Resolving yann.lecun.com (yann.lecun.com)... 104.21.29.36, 172.67.171.76, 2606:4700:3034::6815:1d24, ...\n","Connecting to yann.lecun.com (yann.lecun.com)|104.21.29.36|:80... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 4542 (4.4K) [application/x-gzip]\n","Saving to: ‘t10k-labels-idx1-ubyte.gz’\n","\n","t10k-labels-idx1-ub 100%[===================>]   4.44K  --.-KB/s    in 0s      \n","\n","2021-09-25 03:52:03 (260 MB/s) - ‘t10k-labels-idx1-ubyte.gz’ saved [4542/4542]\n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lClKUtVyFTKD","executionInfo":{"status":"ok","timestamp":1632541958208,"user_tz":240,"elapsed":4204,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}},"outputId":"7695f1b3-7391-45c9-9755-34c01a816b06"},"source":["!pip install pypng"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pypng\n","  Downloading pypng-0.0.21-py3-none-any.whl (48 kB)\n","\u001b[?25l\r\u001b[K     |██████▉                         | 10 kB 28.6 MB/s eta 0:00:01\r\u001b[K     |█████████████▋                  | 20 kB 20.7 MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 30 kB 16.0 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▎    | 40 kB 13.6 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 48 kB 2.4 MB/s \n","\u001b[?25hInstalling collected packages: pypng\n","Successfully installed pypng-0.0.21\n"]}]},{"cell_type":"code","metadata":{"id":"C9Udg1C8FXwl","executionInfo":{"status":"ok","timestamp":1632541967488,"user_tz":240,"elapsed":73,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}}},"source":["from tqdm import *"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ygcwF1AnFlVW","executionInfo":{"status":"ok","timestamp":1632542042182,"user_tz":240,"elapsed":17291,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}},"outputId":"d04112d7-6419-4cf0-b69c-2784a32cfad0"},"source":["# source: https://github.com/myleott/mnist_png/blob/master/convert_mnist_to_png.py\n","import os\n","import struct\n","import sys\n","\n","from array import array\n","from os import path\n","\n","import png\n","\n","# source: http://abel.ee.ucla.edu/cvxopt/_downloads/mnist.py\n","def read(dataset = \"training\", path = \".\"):\n","    if dataset is \"training\":\n","        fname_img = os.path.join(path, 'train-images-idx3-ubyte')\n","        fname_lbl = os.path.join(path, 'train-labels-idx1-ubyte')\n","    elif dataset is \"testing\":\n","        fname_img = os.path.join(path, 't10k-images-idx3-ubyte')\n","        fname_lbl = os.path.join(path, 't10k-labels-idx1-ubyte')\n","    else:\n","        raise ValueError(\"dataset must be 'testing' or 'training'\")\n","\n","    flbl = open(fname_lbl, 'rb')\n","    magic_nr, size = struct.unpack(\">II\", flbl.read(8))\n","    lbl = array(\"b\", flbl.read())\n","    flbl.close()\n","\n","    fimg = open(fname_img, 'rb')\n","    magic_nr, size, rows, cols = struct.unpack(\">IIII\", fimg.read(16))\n","    img = array(\"B\", fimg.read())\n","    fimg.close()\n","\n","    return lbl, img, size, rows, cols\n","\n","def write_dataset(labels, data, size, rows, cols, output_dir):\n","    # create output directories\n","    output_dirs = [\n","        path.join(output_dir, str(i))\n","        for i in range(10)\n","    ]\n","    for dir in output_dirs:\n","        if not path.exists(dir):\n","            os.makedirs(dir)\n","\n","    # write data\n","    for (i, label) in tqdm(enumerate(labels)):\n","        output_filename = path.join(output_dirs[label], str(i) + \".png\")\n","        with open(output_filename, \"wb\") as h:\n","            w = png.Writer(cols, rows, greyscale=True)\n","            data_i = [\n","                data[ (i*rows*cols + j*cols) : (i*rows*cols + (j+1)*cols) ]\n","                for j in range(rows)\n","            ]\n","            w.write(h, data_i)\n","\n","input_path = '/content'\n","output_path = '/content/mnist'\n","for dataset in [\"training\", \"testing\"]:\n","    labels, data, size, rows, cols = read(dataset, input_path)\n","    write_dataset(labels, data, size, rows, cols,\n","                  path.join(output_path, dataset))"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["60000it [00:14, 4173.27it/s]\n","10000it [00:02, 3753.69it/s]\n"]}]},{"cell_type":"markdown","metadata":{"id":"_eHAnx6CFpLB"},"source":["# 2. Load and Pre-Process the data "]},{"cell_type":"code","metadata":{"id":"OTc9L-bAFlYV","executionInfo":{"status":"ok","timestamp":1632542060855,"user_tz":240,"elapsed":510,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}}},"source":["#Create csv files\n","import glob \n","import pandas as pd\n","\n","for split in ['training', 'testing']:\n","    rows = []\n","    for folder in glob.glob('/content/mnist/'+ split + '/*'):\n","        label = folder.split(\"/\")[-1]\n","        for image_path in glob.glob(folder+ \"/*\"):\n","            rows.append([image_path,label])\n","    df=pd.DataFrame(rows,columns=['Path','Label'])\n","    df.to_csv(split + \".csv\", index = False)"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":591},"id":"QdSLyrQvFlbF","executionInfo":{"status":"ok","timestamp":1632542078667,"user_tz":240,"elapsed":1890,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}},"outputId":"0d44fe46-5f06-4818-de1a-8ce3806ac420"},"source":["# Visualize the dataset \n","\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import cv2\n","\n","def view_dataset(paths, labels, method='cv2'):\n","    fig, axs = plt.subplots(5, 5, figsize=(10, 10))\n","    flatted_axs = [item for one_ax in axs for item in one_ax]\n","    for ax, path, label in zip(flatted_axs, paths[:25], labels[:25]):\n","        if method == 'cv2':\n","            img = cv2.imread(path, 3)\n","        elif method == 'tf':\n","            img = try_tf_image(path)\n","        ax.imshow(img)\n","        ax.set_title(label)\n","        ax.axis('off')\n","    plt.show() \n","\n","\n","df = pd.read_csv('/content/training.csv')\n","paths = df['Path'][:25]\n","labels = df['Label'][:25]\n","\n","view_dataset(paths, labels)"],"execution_count":7,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x720 with 25 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"1C1pV6kgFld5","executionInfo":{"status":"ok","timestamp":1632542149785,"user_tz":240,"elapsed":68,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}}},"source":["import pandas as pd\n","from torch.utils.data import Dataset, DataLoader\n","from PIL import Image\n","import torch\n","\n","class Dataset(Dataset):\n","    def __init__(self, data_split, toy=False):\n","     \n","        df = pd.read_csv(data_split)\n","        \n","        # Remove any paths for which the image files do not exist\n","        #df = df[df[\"Path\"].apply(os.path.exists)]\n","      \n","        #print (\"%s size %d\" % (data_split, df.shape[0]))\n","\n","        #Could remove\n","        #if toy:\n","            #df = df.sample(frac=0.01)\n","\n","        self.img_paths = df[\"Path\"].tolist()\n","\n","        self.labels = df[\"Label\"].tolist()\n","\n","        self.n_classes = len(self.labels)\n","\n","    def __getitem__(self, index):\n","           img = np.array(Image.open(self.img_paths[index])).astype(np.float32) / 255.\n","           label = self.labels[index]\n","           label_vec = torch.LongTensor([label])\n","           return img, label_vec\n","          \n","\n","    def __len__(self):\n","        return len(self.img_paths)"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pMaVnaKrFlgh","executionInfo":{"status":"ok","timestamp":1632542150926,"user_tz":240,"elapsed":173,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}},"outputId":"57c70c01-4739-4e5b-9dbd-3dd3c68dcbb8"},"source":["train_dataset = Dataset('training.csv')\n","test_dataset = Dataset('testing.csv')\n","\n","\n","train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=100,\n","                                         shuffle=True)\n","test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=100,\n","                                         shuffle=False)\n","\n","print(len(train_loader))\n","print(len(test_loader))"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["600\n","100\n"]}]},{"cell_type":"markdown","metadata":{"id":"KrsQ9BkqGISe"},"source":["# 3. Define the Model "]},{"cell_type":"code","metadata":{"id":"GrH1tGLqFljL","executionInfo":{"status":"ok","timestamp":1632542191864,"user_tz":240,"elapsed":171,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}}},"source":["import torch.nn as nn\n","\n","class Flatten(nn.Module):\n","    def forward(self, input):\n","        return input.view(input.size(0), -1)\n","      \n","model = nn.Sequential(\n","          Flatten(),\n","          nn.Linear(784, 50),\n","          nn.ReLU(),\n","          nn.Linear(50, 10),\n","          nn.Softmax())\n"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mlqaB8PIGodV"},"source":["# 4. Define loss function and optimizer"]},{"cell_type":"code","metadata":{"id":"La63IkEKGnuI","executionInfo":{"status":"ok","timestamp":1632542320179,"user_tz":240,"elapsed":70,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}}},"source":["import torch.optim as optim\n","\n","# Define the cost function\n","criterion = nn.CrossEntropyLoss()\n","\n","# Define the optimizer, learning rate \n","optimizer = optim.Adam(model.parameters(), lr=0.01)"],"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Yi_n6zbCGURk"},"source":["# 5. Train the Model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ko96VH2aGXkT","executionInfo":{"status":"ok","timestamp":1632542352920,"user_tz":240,"elapsed":28305,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}},"outputId":"490b489b-d274-4498-bd02-150f0aabcf0d"},"source":["for epoch in range(2): \n","      for i, (inputs, labels) in enumerate(train_loader, 0):\n","        # zero the parameter gradients\n","        optimizer.zero_grad()\n","\n","        # forward propogation\n","        outputs = model(inputs)\n","        \n","        # calculate the loss\n","        loss = criterion(outputs, labels.squeeze(1))\n","        \n","        # backpropogation + update parameters\n","        loss.backward()\n","        optimizer.step()\n","\n","        # print statistics\n","        cost = loss.item()\n","        if i % 100 == 0:    # print every 1000 iterations\n","            print('Epoch:' + str(epoch) + \", Iteration: \" + str(i) \n","                  + \", training cost = \" + str(cost))"],"execution_count":15,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torch/nn/modules/container.py:139: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n","  input = module(input)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch:0, Iteration: 0, training cost = 2.302121639251709\n","Epoch:0, Iteration: 100, training cost = 1.551684856414795\n","Epoch:0, Iteration: 200, training cost = 1.566657304763794\n","Epoch:0, Iteration: 300, training cost = 1.5858577489852905\n","Epoch:0, Iteration: 400, training cost = 1.545067548751831\n","Epoch:0, Iteration: 500, training cost = 1.5099284648895264\n","Epoch:1, Iteration: 0, training cost = 1.5268011093139648\n","Epoch:1, Iteration: 100, training cost = 1.487734317779541\n","Epoch:1, Iteration: 200, training cost = 1.565764307975769\n","Epoch:1, Iteration: 300, training cost = 1.5289541482925415\n","Epoch:1, Iteration: 400, training cost = 1.5416637659072876\n","Epoch:1, Iteration: 500, training cost = 1.4905667304992676\n"]}]},{"cell_type":"markdown","metadata":{"id":"rRiFHUpoG00N"},"source":["# 6. Define evaluation metric"]},{"cell_type":"code","metadata":{"id":"L4c_BehIFlly","executionInfo":{"status":"ok","timestamp":1632542420955,"user_tz":240,"elapsed":79,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}}},"source":["def calculate_accuracy(loader):\n","    total = 0\n","    correct = 0\n","  \n","    all_images = []\n","    all_preds = []\n","    all_labels = []\n","    with torch.no_grad():\n","        for data in loader:\n","            images, labels = data\n","            outputs = model(images)\n","            _, predicted = torch.max(outputs.data, 1)\n","            total += labels.size(0)\n","            correct += (predicted == labels.squeeze()).sum().item()\n","            \n","            all_images.append(images)\n","            all_preds.append(predicted.numpy())\n","            all_labels.append(labels)\n","\n","    return 100 * correct / total, all_images, all_preds, all_labels"],"execution_count":17,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SNIYNp0PLi8I"},"source":["# 7. Report results on the train and test data"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BEcKBWBnHDmN","executionInfo":{"status":"ok","timestamp":1632542436971,"user_tz":240,"elapsed":15106,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}},"outputId":"1fa38119-2183-493a-a6c7-8cbfc867a079"},"source":["train_accuracy, _ , _, _ = calculate_accuracy(train_loader)\n","test_accuracy, images, preds, labels = calculate_accuracy(test_loader)\n","\n","print('Train accuracy: %f' % train_accuracy)\n","print('Test accuracy: %f' % test_accuracy)\n","\n","images = np.concatenate(images, axis=0)\n","preds = np.concatenate(preds, axis=0)\n","labels = np.squeeze(np.concatenate(labels, axis=0))"],"execution_count":18,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torch/nn/modules/container.py:139: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n","  input = module(input)\n"]},{"output_type":"stream","name":"stdout","text":["Train accuracy: 95.048333\n","Test accuracy: 94.990000\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":591},"id":"S0slOt5EHLLj","executionInfo":{"status":"ok","timestamp":1632542441929,"user_tz":240,"elapsed":1184,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}},"outputId":"aa9279a4-f415-4002-c364-1a2947bd70c6"},"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","\n","def unison_shuffled_copies(a, b, c):\n","    assert len(a) == len(b) == len(c)\n","    p = np.random.permutation(len(a))\n","    return a[p], b[p], c[p]\n","\n","images, labels, preds = unison_shuffled_copies(images, labels, preds)\n","\n","fig, axs = plt.subplots(5, 5, figsize=(10, 10))\n","flatted_axs = [item for one_ax in axs for item in one_ax]\n","for ax, img, label, pred in zip(flatted_axs, images[:25], labels[:25], preds[:25]):\n","    ax.imshow(np.reshape(img, (28,28)))\n","    ax.set_title('l:{},p:{}'.format(label, pred))\n","    ax.axis('off')\n","plt.show()  "],"execution_count":19,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x720 with 25 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"BIOoEcICHt_M","executionInfo":{"status":"ok","timestamp":1632542790444,"user_tz":240,"elapsed":68,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}}},"source":["torch.save(model.state_dict(), 'drive/MyDrive/ML-Introduction/mnist_checkpoint.pth')"],"execution_count":25,"outputs":[]},{"cell_type":"code","metadata":{"id":"9vCxarmaHuyr"},"source":["% cd drive/MyDrive/ML-Introduction/"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DA0XpLwrHu3N","executionInfo":{"status":"ok","timestamp":1632542829079,"user_tz":240,"elapsed":61,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}}},"source":[""],"execution_count":26,"outputs":[]},{"cell_type":"code","metadata":{"id":"DA2GhiGKgRTf"},"source":["\n","import torch, torchvision\n","from torchvision import datasets, transforms\n","from torch import nn, optim\n","from torch.nn import functional as F\n","\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"y9ADAfDVdcJj"},"source":["!cd drive/My\\ Drive/ML-Introduction"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"alEpGAjqc6rq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632347796534,"user_tz":240,"elapsed":31202,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}},"outputId":"fc94537b-9f91-4b97-86f5-938d7ff32579"},"source":["batch_size = 128\n","num_epochs = 2\n","device = torch.device('cuda')\n","\n","class Net(nn.Module):\n","    def __init__(self):\n","        super(Net, self).__init__()\n","\n","        self.conv_layers = nn.Sequential(\n","            nn.Conv2d(1, 10, kernel_size=5),\n","            nn.MaxPool2d(2),\n","            nn.ReLU(),\n","            nn.Conv2d(10, 20, kernel_size=5),\n","            nn.Dropout(),\n","            nn.MaxPool2d(2),\n","            nn.ReLU(),\n","        )\n","        self.fc_layers = nn.Sequential(\n","            nn.Linear(320, 50),\n","            nn.ReLU(),\n","            nn.Dropout(),\n","            nn.Linear(50, 10),\n","            nn.Softmax(dim=1)\n","        )\n","\n","    def forward(self, x):\n","        x = self.conv_layers(x)\n","        x = x.view(-1, 320)\n","        x = self.fc_layers(x)\n","        return x\n","    \n","def train(model, device, train_loader, optimizer, epoch):\n","    model.train()\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        data, target = data.to(device), target.to(device)\n","        optimizer.zero_grad()\n","        output = model(data)\n","        loss = F.nll_loss(output.log(), target)\n","        loss.backward()\n","        optimizer.step()\n","        if batch_idx % 100 == 0:\n","            print('Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'.format(\n","                epoch, batch_idx * len(data), len(train_loader.dataset),\n","                100. * batch_idx / len(train_loader), loss.item()))\n","\n","def test(model, device, test_loader):\n","    model.eval()\n","    test_loss = 0\n","    correct = 0\n","    with torch.no_grad():\n","        for data, target in test_loader:\n","            data, target = data.to(device), target.to(device)\n","            output = model(data)\n","            test_loss += F.nll_loss(output.log(), target).item() # sum up batch loss\n","            pred = output.max(1, keepdim=True)[1] # get the index of the max log-probability\n","            correct += pred.eq(target.view_as(pred)).sum().item()\n","\n","    test_loss /= len(test_loader.dataset)\n","    print('\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'.format(\n","        test_loss, correct, len(test_loader.dataset),\n","    100. * correct / len(test_loader.dataset)))\n","\n","train_loader = torch.utils.data.DataLoader(\n","    datasets.MNIST('mnist_data', train=True, download=True,\n","                   transform=transforms.Compose([\n","                       transforms.ToTensor()\n","                   ])),\n","    batch_size=batch_size, shuffle=True)\n","\n","test_loader = torch.utils.data.DataLoader(\n","    datasets.MNIST('mnist_data', train=False, transform=transforms.Compose([\n","                       transforms.ToTensor()\n","                   ])),\n","    batch_size=batch_size, shuffle=True)\n","\n","model = Net().to(device)\n","optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.5)\n","\n","for epoch in range(1, num_epochs + 1):\n","    train(model, device, train_loader, optimizer, epoch)\n","    test(model, device, test_loader)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /pytorch/c10/core/TensorImpl.h:1156.)\n","  return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)\n"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 1 [0/60000 (0%)]\tLoss: 2.323179\n","Train Epoch: 1 [12800/60000 (21%)]\tLoss: 2.226682\n","Train Epoch: 1 [25600/60000 (43%)]\tLoss: 1.491852\n","Train Epoch: 1 [38400/60000 (64%)]\tLoss: 0.898383\n","Train Epoch: 1 [51200/60000 (85%)]\tLoss: 0.630561\n","\n","Test set: Average loss: 0.0046, Accuracy: 8918/10000 (89%)\n","\n","Train Epoch: 2 [0/60000 (0%)]\tLoss: 0.741472\n","Train Epoch: 2 [12800/60000 (21%)]\tLoss: 0.612713\n","Train Epoch: 2 [25600/60000 (43%)]\tLoss: 0.628452\n","Train Epoch: 2 [38400/60000 (64%)]\tLoss: 0.433390\n","Train Epoch: 2 [51200/60000 (85%)]\tLoss: 0.598243\n","\n","Test set: Average loss: 0.0027, Accuracy: 9403/10000 (94%)\n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VBTBd9UfhuQn","executionInfo":{"status":"ok","timestamp":1632348124021,"user_tz":240,"elapsed":522,"user":{"displayName":"abhishek bharani","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08588616614432996736"}},"outputId":"02426d22-b798-4654-d01c-7a8ccfd4568a"},"source":["!rm -r mnist_data/"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["rm: cannot remove 'mnist_data/': No such file or directory\n"]}]},{"cell_type":"code","metadata":{"id":"k-eALkUNh3po"},"source":[""],"execution_count":null,"outputs":[]}]}